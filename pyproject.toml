[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "robust-semantic-agent"
version = "0.1.0"
description = "Robust Semantic Agent: Belief-MDP with CVaR risk, CBF safety, and Belnap semantics"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Research Team", email = "research@example.com"}
]
keywords = ["reinforcement-learning", "pomdp", "cvar", "control-barrier-functions", "belnap-logic"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "numpy>=1.24,<2.0",
    "scipy>=1.10,<2.0",
    "cvxpy>=1.4,<2.0",
    "matplotlib>=3.7,<4.0",
    "pyyaml>=6.0,<7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0,<9.0",
    "pytest-cov>=4.0,<6.0",
    "pytest-benchmark>=4.0,<5.0",
    "ruff>=0.1,<1.0",
    "black>=23.0,<25.0",
    "mypy>=1.5,<2.0",
    "ipython>=8.0,<9.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/robust-semantic-agent"
Documentation = "https://github.com/yourusername/robust-semantic-agent#readme"
Repository = "https://github.com/yourusername/robust-semantic-agent"
Issues = "https://github.com/yourusername/robust-semantic-agent/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["robust_semantic_agent*"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=robust_semantic_agent",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests for mathematical properties",
    "integration: Integration tests for end-to-end scenarios",
    "slow: Tests that take significant time to run",
]

[tool.coverage.run]
source = ["robust_semantic_agent"]
omit = [
    "*/tests/*",
    "*/exploration/*",
    "*/__init__.py",
    "*/cli/*",
    "*/reports/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".tox",
    ".venv",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B023",  # function does not bind loop variable (intentional in closures)
    "N803",  # argument name should be lowercase (scientific notation: A_c, K)
    "N806",  # variable should be lowercase (scientific notation: H, V, B, K)
    "N807",  # function name should not start/end with __ (module repr)
    "SIM108", # use ternary operator (readability preference)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py
"tests/*" = ["N802"]  # allow lowercase in test names

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
